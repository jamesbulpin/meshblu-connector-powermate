// Generated by CoffeeScript 1.12.6
(function() {
  var Connector, EventEmitter, Powermate, _, async, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  async = require('async');

  EventEmitter = require('events').EventEmitter;

  Powermate = require('../src/powermate');

  debug = require('debug')('meshblu-connector-powermate:index');

  Connector = (function(superClass) {
    extend(Connector, superClass);

    function Connector(arg) {
      var ref;
      ref = arg != null ? arg : {}, this.powermate = ref.powermate, this.interval = ref.interval;
      this._onClicked = bind(this._onClicked, this);
      this._onError = bind(this._onError, this);
      this._isClosed = bind(this._isClosed, this);
      this._connectAndDelay = bind(this._connectAndDelay, this);
      this.start = bind(this.start, this);
      this.onConfig = bind(this.onConfig, this);
      this.isOnline = bind(this.isOnline, this);
      this.die = bind(this.die, this);
      this.close = bind(this.close, this);
      if (this.interval == null) {
        this.interval = 5000;
      }
      if (this.powermate == null) {
        this.powermate = new Powermate;
      }
      this.powermate.on('error', this._onError);
      this.powermate.on('clicked', this._onClicked);
    }

    Connector.prototype.close = function(callback) {
      debug('closing');
      this.powermate.close();
      this.closed = true;
      return callback();
    };

    Connector.prototype.die = function(error) {
      if (error == null) {
        return process.exit(0);
      }
      console.error('Powermate Connector Error', error);
      return process.exit(1);
    };

    Connector.prototype.isOnline = function(callback) {
      return callback(null, {
        running: this.powermate.isConnected()
      });
    };

    Connector.prototype.onConfig = function(device, callback) {
      this.device = device != null ? device : {};
      if (callback == null) {
        callback = function() {};
      }
      return callback(null);
    };

    Connector.prototype.start = function(device, callback) {
      this.device = device;
      debug('started');
      async.doUntil(this._connectAndDelay, this._isClosed, this.die);
      return callback();
    };

    Connector.prototype._connectAndDelay = function(callback) {
      return this.powermate.connect((function(_this) {
        return function(error) {
          if (error != null) {
            _this._onError(error);
          }
          return _.delay(callback, _this.interval);
        };
      })(this));
    };

    Connector.prototype._isClosed = function() {
      return this.closed === true;
    };

    Connector.prototype._onError = function(error) {
      var ref;
      debug('on error', (ref = error != null ? error.toString() : void 0) != null ? ref : error);
      return this.emit('error', error);
    };

    Connector.prototype._onClicked = function() {
      if (_.isEmpty(this.device)) {
        return debug('clicked but no device on scope');
      }
      debug('emitting clicked message');
      return this.emit('message', {
        devices: ['*'],
        data: {
          action: 'click',
          device: this.device
        }
      });
    };

    return Connector;

  })(EventEmitter);

  module.exports = Connector;

}).call(this);

//# sourceMappingURL=index.js.map
