// Generated by CoffeeScript 1.12.6
(function() {
  var EventEmitter, Powermate, _, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  EventEmitter = require('events').EventEmitter;

  debug = require('debug')('meshblu-connector-powermate:powermate');

  Powermate = (function(superClass) {
    extend(Powermate, superClass);

    function Powermate(arg) {
      this.HID = (arg != null ? arg : {}).HID;
      this._createError = bind(this._createError, this);
      this._emitError = bind(this._emitError, this);
      this._emitClicked = bind(this._emitClicked, this);
      this._onData = bind(this._onData, this);
      this.isConnected = bind(this.isConnected, this);
      this.close = bind(this.close, this);
      this.connect = bind(this.connect, this);
      if (this.HID == null) {
        this.HID = require('node-hid');
      }
    }

    Powermate.prototype.connect = function(callback) {
      var devices, path;
      if (this.device != null) {
        return callback(null);
      }
      devices = this.HID.devices(1917, 1040);
      if (_.isEmpty(devices)) {
        return callback(this._createError(404, 'Powermate device not found'));
      }
      if (_.size(devices) > 1) {
        return callback(this._createError(412, 'More than one Powermate device found'));
      }
      path = _.first(devices).path;
      this.device = new this.HID.HID(path);
      this._throttledEmitClicked = _.throttle(this._emitClicked, 1000, {
        leading: true,
        trailing: false
      });
      this.device.on('data', this._onData);
      this.device.once('error', (function(_this) {
        return function(error) {
          _this._emitError(error);
          return _this.close();
        };
      })(this));
      debug('connected to device', {
        path: path
      });
      return callback();
    };

    Powermate.prototype.close = function() {
      if (!this.isConnected()) {
        return;
      }
      this.device.close();
      this.device.removeAllListeners();
      return this.device = null;
    };

    Powermate.prototype.isConnected = function() {
      return this.device != null;
    };

    Powermate.prototype._onData = function(data) {
      debug('_onData', data);
      if (data[0] || (0x00 === data[1])) {
        return this._throttledEmitClicked();
      }
    };

    Powermate.prototype._emitClicked = function() {
      debug('clicked');
      return this.emit('clicked');
    };

    Powermate.prototype._emitError = function(error) {
      if (!this.isConnected()) {
        return;
      }
      if (error == null) {
        return;
      }
      debug('emit error', error);
      this.emit('error', error);
      return this.close();
    };

    Powermate.prototype._createError = function(code, message) {
      var error;
      error = new Error(message);
      error.code = code;
      return error;
    };

    return Powermate;

  })(EventEmitter);

  module.exports = Powermate;

}).call(this);

//# sourceMappingURL=powermate.js.map
